# Generated by Django 5.2.7 on 2025-10-22 13:40

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('grading', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Rubric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('activity_id', models.IntegerField(blank=True, help_text='Associated activity/assessment', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('total_points', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(1)])),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rubrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.IntegerField()),
                ('question_text', models.TextField()),
                ('answer_text', models.TextField()),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('grading', 'Grading in Progress'), ('graded', 'Graded'), ('reviewed', 'Reviewed by Teacher')], default='submitted', max_length=20)),
                ('score', models.FloatField(blank=True, help_text='Total score received', null=True)),
                ('max_score', models.FloatField(blank=True, help_text='Total points possible', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Overall feedback from AI')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('graded_by_ai', models.BooleanField(default=False)),
                ('ai_model_used', models.CharField(blank=True, max_length=100)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('teacher_score', models.FloatField(blank=True, null=True)),
                ('teacher_feedback', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
                ('rubric', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='grading.rubric')),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='RubricCriterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="e.g., 'Accuracy', 'Completeness', 'Clarity'", max_length=255)),
                ('description', models.TextField(help_text='What to look for in this criterion')),
                ('max_points', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('weight', models.FloatField(default=1.0, help_text='Weight of this criterion (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='grading.rubric')),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CriterionScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('feedback', models.TextField(help_text='Specific feedback for this criterion')),
                ('teacher_points', models.FloatField(blank=True, null=True)),
                ('teacher_feedback', models.TextField(blank=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_scores', to='grading.assessmentsubmission')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grading.rubriccriterion')),
            ],
        ),
        migrations.AddIndex(
            model_name='assessmentsubmission',
            index=models.Index(fields=['student', 'activity_id'], name='grading_ass_student_f533cf_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentsubmission',
            index=models.Index(fields=['status'], name='grading_ass_status_112a06_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rubriccriterion',
            unique_together={('rubric', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='criterionscore',
            unique_together={('submission', 'criterion')},
        ),
    ]
